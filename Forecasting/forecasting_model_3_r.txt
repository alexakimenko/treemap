#install.packages("forecast")
#install.packages("reshape")
#install.packages("xts")
library(forecast)
library(reshape)
library(xts)

add.months<-function(date,n) seq(date, by = paste (n, "months"), length = 2)[2]

forecastStl <- function(myTs,var_name, n.ahead = 6) {
  fit.stl <- stl(myTs,t.window=8, s.window = 'periodic')
  sts <- fit.stl$time.series
  fore <- forecast(fit.stl, h = n.ahead, level = 95)
  plot(sts,main=paste0(var_name," - STL Decompose"))
  pdf(paste0(path,"output/",var_name,"_stl_decompose.pdf"))
  plot(sts)
  dev.off( )
  return(fore$mean)
}


avg_l3_ns_months<-function(myTs,n.ahead = 6){
  myTs_cleared<-subset(myTs,season=c(2,3,4,6,7,8,9,10,11))
  pred<-rep(mean(tail(myTs_cleared,3)),n.ahead )
  start<-tsp(myTs)[2]+2/12
  start<-c(trunc(start),start%%1*12)     # incorrect for Dec!
  pred<-ts(pred,start=start, frequency=12) 
  return(pred)
}


MAPE_ts<-function(y,var_name,BxTs, n.ahead=6){
  test_df<-data.frame()
  for (i in 30:length(y)){
    end<-tsp(y)[1]+i/12
    end<-c(trunc(end),end%%1*12)
    t_y<-window(y,end=end)
    t_y_pred<-forecastStl(t_y,var_name,n.ahead)
    actual<-lag(BxTs,-1)*y
    forecast<-lag(BxTs,-1)*t_y_pred
    df<-data.frame(YearMonth=as.Date(paste(end(t_y_pred)[1],end(t_y_pred)[2],1,sep="/")),
                   n.ahead=n.ahead,
                   actual=actual[i+n.ahead],
                   actual_nf=y[i+n.ahead],
                   forecast=forecast[n.ahead],
                   forecast_nf=t_y_pred[n.ahead],
                   MAPE=abs(forecast[n.ahead]-actual[i+n.ahead])/actual[i+n.ahead])
    test_df<-rbind(test_df,df)
  }
  return(test_df)
}

#path<-"/Users/AlexAkimenko/Documents/работа/Citi/Forecasting/"
path<-"//vkovnazcti0023/COL/0-Collections_Strategy_and_System_Support/STRATEGY/Akimenko/pilots/forecasting/"
v<-read.csv(paste0(path,"input.csv"),header=T,sep=";")
variables<-colnames(v)[2:ncol(v)]
start_month<-c(2012,12)  # correct - needs to be selected from input data (min month+1 due to net flow logic)
end_month<-c(2016, 4) # correct - needs to be selected from input data
forecast_month<-c(2016, 5) # correct - needs to be selected from input data
v<-ts(v[,-1], start=start_month, end=end_month, frequency=12)
v[,1]<-c(as.xts(v[,1]),as.xts(forecastStl(v[,1],variables[1])))



output<-data.frame()
output1<-data.frame()






## CC
for (i in 2:7){ 
  
  y<-v[,i]/lag(v[,i-1],-1) ### net flows calculation
  var_name<-paste0(variables[i],"NF")
  y_pred<-forecastStl(y,var_name,n.ahead)
  
  if (ncol(output)==0){
	var_name<-variables[i-1]
	x_pred<-forecastStl(v[,i-1],var_name,n.ahead)
	v_pred<-c(as.xts(v[,i-1]),as.xts(x_pred))
	forecast<-c(as.xts(v[,i]),lag(v_pred,1)*as.xts(y_pred))
	output<-cbind(v_pred,forecast)
  } else {
  forecast<-lag(output[,i-1],1)*as.xts(y_pred) # здесь нужно брать из таблицы с actuals+forecast
  }

}

###  validation results
output$forecast<-as.character(output$forecast)
output_<-melt(output, id=c("YearMonth","n.ahead","var"))
output_[is.na(output_)] <- ""
output_$value<-as.numeric(as.character(output_$value))
output_c<-cast(output_, var + n.ahead + variable ~ YearMonth)
output_c[is.na(output_c)] <- ""
write.table(output_c, paste0(path,"/output/validation_results.txt"), sep="\t",row.names=F)	


###  validation summary
output$MAPE<-as.numeric(output$MAPE)
output2<-aggregate(x=output$MAPE,by=list(output$n.ahead,output$var),function(x) mean(x,na.rm=T))
colnames(output2) <- c("n.ahead", "ProductBucket","MAPE")
output2$Date<-as.Date(paste(forecast_month[1],forecast_month[2],1,sep="/"))
output2<-output2[output2$n.ahead!="0",]
write.table(output2, paste0(path,"/output/validation_summary.txt"), sep="\t",row.names=F)	
mean(output2$MAPE)


df<-data.frame(YearMonth=as.Date(paste(end(t_y_pred)[1],end(t_y_pred)[2],1,sep="/")),
  n.ahead=n.ahead,
  actual=actual[i+n.ahead],
  actual_nf=y[i+n.ahead],
  forecast=forecast[n.ahead],
  forecast_nf=t_y_pred[n.ahead],
  MAPE=abs(forecast[n.ahead]-actual[i+n.ahead])/actual[i+n.ahead])
test_df<-rbind(test_df,df)
