#install.packages("forecast")
#install.packages("reshape")
library(forecast)
library(reshape)

add.months= function(date,n) seq(date, by = paste (n, "months"), length = 2)[2]

forecastStl <- function(myTs,var, n.ahead = 6) {
	fit.stl <- stl(myTs,t.window=8, s.window = 'periodic')
	sts <- fit.stl$time.series
	fore <- forecast(fit.stl, h = n.ahead, level = 95)
	plot(sts,main=paste0(var," - STS Decompose"))
	pdf(paste0(path,"output/",var,"_sts_decompose.pdf"))
	plot(sts)
	dev.off( )
    return(fore$mean)
}


avg_l3_ns_months<-function(myTs,n.ahead = 6){
    myTs_cleared<-subset(myTs,season=c(2,3,4,6,7,8,9,10,11))
    pred<-rep(mean(tail(myTs_cleared,3)),n.ahead )
	start<-tsp(myTs)[2]+2/12
	start<-c(trunc(start),start%%1*12)     # incorrect for Dec!
    pred<-ts(pred,start=start, frequency=12) 
	return(pred)
}


MAPE_ts<-function(myTs,var,BxTs, n.ahead=6){
	test_df<-data.frame()
	for (i in 30:length(myTs)){
		end<-tsp(myTs)[1]+i/12
		end<-c(trunc(end),end%%1*12)
		t_myTs<-window(myTs,end=end)
		t_myTs_pred<-forecastStl(t_myTs,var,n.ahead)
		df<-data.frame(YearMonth=as.Date(paste(end(t_myTs_pred)[1],end(t_myTs_pred)[2],1,sep="/")),
			n.ahead=n.ahead,
			actual=BxTs[i+n.ahead],
			actual_for_check=myTs[i+n.ahead],
			forecast=t_myTs_pred[n.ahead]*,
			MAPE=abs(t_myTs_pred[n.ahead]-myTs[i+n.ahead])/myTs[i+n.ahead])
		test_df<-rbind(test_df,df)
	}
	return(test_df)
}


path<-"//vkovnazcti0023/COL/0-Collections_Strategy_and_System_Support/STRATEGY/Akimenko/pilots/forecasting/"
v<-read.csv(paste0(path,"input.csv"),header=T,sep=";")
v$YearMonth<-as.POSIXct(strptime(v$YearMonth, "%d.%m.%Y"))
variables<-colnames(v)[2:ncol(v)]
start_month<-c(2013,1)  # correct - needs to be selected from input data (min month+1 due to net flow logic)
end_month<-c(2016, 4) # correct - needs to be selected from input data
forecast_month<-c(2016, 5) # correct - needs to be selected from input data


### net flows calculations

bk_to_nf<-function(Bx,Bx_m1){
	# Bx is for Bucket x, Bx_m1 is for Bucket x-1 , y for net flow
	y<-Bx/append(0,Bx_m1)[-length(Bx_m1)]
	return(y[-1])
}

nf_to_bk<-function(Bx_m1,y){
	# Bx is for Bucket x, Bx_m1 is for Bucket x-1 , y for net flow
	Bx<-y*Bx_m1[-length(Bx_m1)]
	return(Bx)
}


output<-data.frame()
output1<-data.frame()







for (i in 2:length(variables)){
	Bx_m1<-v[,variables[i-1]]
	Bx<-v[,variables[i]]
	y<-bk_to_nf(Bx,Bx_m1)
	var<-paste0(variables[i],"NF")
	myTs<-ts(y, start=start_month, end=end_month, frequency=12)
	BxTs<-ts(Bx[2:length(Bx)], start=start_month, end=end_month, frequency=12)
	MAPE6<-MAPE_ts(myTs,var,Bx,6)
	MAPE6$var<-var
	MAPE3<-MAPE_ts(myTs,var,BxTs,3)
	MAPE3$var<-var
	forecast<-forecastStl(myTs,BxTs,6)
	forecast_df<-data.frame(YearMonth=as.Date(time(forecast)),n.ahead=0,actual="",forecast=forecast,MAPE="",var=var)
	output<-rbind(output,MAPE6,MAPE3,forecast_df)
}

###  validation results
output$forecast<-as.character(output$forecast)
output_<-melt(output, id=c("YearMonth","n.ahead","var"))
output_[is.na(output_)] <- ""
output_$value<-as.numeric(as.character(output_$value))
output_c<-cast(output_, var + n.ahead + variable ~ YearMonth)
output_c[is.na(output_c)] <- ""
write.table(output_c, paste0(path,"/output/validation_results.txt"), sep="\t",row.names=F)	


###  validation summary
output$MAPE<-as.numeric(output$MAPE)
output2<-aggregate(x=output$MAPE,by=list(output$n.ahead,output$var),function(x) mean(x,na.rm=T))
colnames(output2) <- c("n.ahead", "ProductBucket","MAPE")
output2$Date<-as.Date(paste(forecast_month[1],forecast_month[2],1,sep="/"))
output2<-output2[output2$n.ahead!="0",]
write.table(output2, paste0(path,"/output/validation_summary.txt"), sep="\t",row.names=F)	
mean(output2$MAPE)


